diff --git a/src/platform/mpfs_hal/common/nwc/mss_pll.c b/src/platform/mpfs_hal/common/nwc/mss_pll.c
index 202b96f..c86bbd7 100644
--- a/src/platform/mpfs_hal/common/nwc/mss_pll.c
+++ b/src/platform/mpfs_hal/common/nwc/mss_pll.c
@@ -216,7 +216,7 @@ static void mss_mux_pre_mss_pll_config(void)
  * eNVM as it will do as we approach the return instruction
  * The mb() makes sure order of processing is not changed by the compiler
  ******************************************************************************/
-__attribute__((section(".ram_codetext"))) \
+__attribute__((section(".ram_codetext"), optimize("O0"))) \
         static void mss_mux_post_mss_pll_config(void)
 {
    /*
diff --git a/src/platform/mpfs_hal/startup_gcc/mss_entry.S b/src/platform/mpfs_hal/startup_gcc/mss_entry.S
index 9e049de..e07ae56 100644
--- a/src/platform/mpfs_hal/startup_gcc/mss_entry.S
+++ b/src/platform/mpfs_hal/startup_gcc/mss_entry.S
@@ -55,7 +55,7 @@ _start:
     csrw medeleg, 0
 .skip_e51:
     # mscratch must be init to zero- we are not using scratch memory
-    csrw mscratch, zero
+   #csrw mscratch, zero
     csrw mcause, zero
     csrw mepc, zero
     /*
diff --git a/src/platform/mpfs_hal/startup_gcc/system_startup.c b/src/platform/mpfs_hal/startup_gcc/system_startup.c
index accd9ea..1b4551b 100644
--- a/src/platform/mpfs_hal/startup_gcc/system_startup.c
+++ b/src/platform/mpfs_hal/startup_gcc/system_startup.c
@@ -230,7 +230,7 @@ __attribute__((weak)) int main_other_hart(void)
 
     case 0U:
         __asm volatile ("add sp, x0, %1" : "=r"(dummy) : "r"(app_stack_top_h0));
-        e51();
+        e51(); asm("csrr t0, mscratch; csrw mtvec, t0; ecall");
         break;
 
     case 1U:
@@ -456,7 +456,7 @@ __attribute__((weak)) uint8_t init_mem_protection_unit(void)
  */
 __attribute__((weak)) uint8_t init_pmp(uint8_t hart_id)
 {
-    pmp_configure(hart_id);
+  //pmp_configure(hart_id);
     return (0U);
 }
 
diff --git a/src/platform/platform_config_reference/linker/mpfs-envm.ld b/src/platform/platform_config_reference/linker/mpfs-envm.ld
index 62632ad..0d74775 100644
--- a/src/platform/platform_config_reference/linker/mpfs-envm.ld
+++ b/src/platform/platform_config_reference/linker/mpfs-envm.ld
@@ -100,7 +100,7 @@ MEMORY
     /* eNVM can be made into 128K section or split as required */
     /* In this example, our reset vector is set to point to the */
     /* start of SEC2 at  0x20220000. */
-    eNVM_SEC_2_0_1_3 (rx) : ORIGIN  = 0x20220000, LENGTH = 128k
+    eNVM_SEC_2_0_1_3 (rx) : ORIGIN  = 0x20222000, LENGTH = 18K /* -Os */
     ram_LIM (rwx) : ORIGIN  = 0x08000000, LENGTH = 1024k
     ram_dtm (rwx) : ORIGIN  = 0x01000000, LENGTH = 7k       /* DTIM */
     scratchpad(rwx):  ORIGIN = 0x0A000000, LENGTH = 512k
diff --git a/src/platform/platform_config_reference/mpfs_hal_config/mss_sw_config.h b/src/platform/platform_config_reference/mpfs_hal_config/mss_sw_config.h
index 3abed6b..318ff28 100644
--- a/src/platform/platform_config_reference/mpfs_hal_config/mss_sw_config.h
+++ b/src/platform/platform_config_reference/mpfs_hal_config/mss_sw_config.h
@@ -46,7 +46,7 @@
 #endif
 
 #ifndef MPFS_HAL_LAST_HART
-#define MPFS_HAL_LAST_HART   4
+#define MPFS_HAL_LAST_HART   0
 #endif
 
 /*------------------------------------------------------------------------------
